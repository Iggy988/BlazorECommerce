@page "/cart"

@inject ICartService CartService
@inject IOrderService OrderService
@inject IAuthService AuthService
@inject NavigationManager NavManager

<PageTitle>Shopping Cart</PageTitle>
<h3>Shopping Cart</h3>

@if (cartProducts == null|| cartProducts.Count == 0)
{
    <span>@message</span>
}
@* else if(orderPlaced)
{
    <span>Thank you for your order! You can check your orders <a href="orders">here.</a></span>
} *@
else
{
    <div>
        @foreach (var item in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img class="image" src="@item.ImageUrl"/>
                </div>
                <div class="name">
                    <h5>
                        <a href="/product/@item.ProductId">@item.Title</a>
                    </h5>
                    <span>@item.ProductType</span>
                    <input type="number" value="@item.Quantity" 
                    @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, item))"
                    class="form-control input-quantity" min="1"/>
                    <br/>
                    <button class="btn btn-delete" @onclick="@(()=> RemoveProductFromCart(item.ProductId, item.ProductTypeId))">Delete</button>
                </div>
                <div class="cart-product-price">
                    $@(item.Price * item.Quantity)
                </div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(p => @p.Price * p.Quantity);
        </div>
    </div>
    @if (isAuthenticated)
    {
        <div>
            <h5>Delivery Address</h5>
            <AddressForm/>
        </div>
    }
    <button @onclick="PlaceOrder" class="btn btn-success float-end mt-1">Checkout</button>
}

@code {
    List<CartProductResponseDTO>? cartProducts = null;
    string message = "Loading cart...";
    //bool orderPlaced = false;
    bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        //orderPlaced = false;
        isAuthenticated = await AuthService.IsUserAuthenticated();
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();

        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty.";
        }

    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponseDTO product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        string url = await OrderService.PlaceOrder();
        NavManager.NavigateTo(url);
        //await OrderService.PlaceOrder();
        // await CartService.GetCartItemsCount();
        // orderPlaced = true;
    }
}
